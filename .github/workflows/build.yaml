name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        go: ['1.15']

        # Intentionally use specific versions instead of "latest" to
        # make this build reproducible.
        os: ['ubuntu-18.04']

      # Build all variants regardless of failures
      fail-fast: false
    name: ${{ matrix.os }} / Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        
      - name: Get short SHA
        id: short_sha
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
        
      - uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}
      - run: make get-deps
      - run: make linux-amd64
      - run: make test

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Using short SHA from 2nd step for tag and release name.
          tag_name: ${{steps.short_sha.outputs.sha8}}
          release_name: ${{steps.short_sha.outputs.sha8}}
          draft: false
          prerelease: false
        # Now we upload the artifact we generated in the first step to
        # the release we created in the 3nd step
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./bin/linux-amd64/docker-credential-ecr-login
          asset_name: amazon-ecr-credential-helper
          asset_content_type: application/vnd.github.VERSION.raw
